(defpackage :numpy-file-format/tests
  (:use :cl :numpy-file-format)
  (:export :run))

(in-package :numpy-file-format/tests)

(defun array= (a b)
  (and (eq (array-element-type a)
           (array-element-type b))
       (= (array-total-size a)
          (array-total-size b))
       (let ((= t))
         (loop :for i :below (array-total-size a)
               :while =
               :if (/= (row-major-aref a i)
                       (row-major-aref b i))
                 :do (setq = nil))
         =)))

(defun random-array (dimensions element-type random-generator)
  (let ((array (make-array dimensions
                           :element-type element-type)))
    (loop :for i :below (array-total-size array)
          :do (setf (row-major-aref array i)
                    (funcall random-generator)))
    array))

(defun run ()
  (let ((*print-length* 3))
    (handler-case
        (loop :for (elt-type . random-generator)
                :in (nconc (mapcar (lambda (size)
                                     (cons (list 'signed-byte size)
                                           (lambda ()
                                             (- (random (expt 2 size))
                                                (expt 2 (1- size))))))
                                   '(08 16 32 64))
                           (mapcar (lambda (size)
                                     (cons (list 'unsigned-byte size)
                                           (lambda ()
                                             (random (expt 2 size)))))
                                   '(08 16 32 64))
                           (list (cons 'single-float (lambda () (random 1.0)))
                                 (cons 'double-float (lambda () (random 1.0d0)))
                                 (cons '(complex single-float)
                                       (lambda () (complex (random 1.0) (random 1.0))))
                                 (cons '(complex double-float)
                                       (lambda () (complex (random 1.0d0) (random 1.0d0))))))
              :do (let* ((array (random-array '(10 10 10) elt-type random-generator))
                         (loaded-array (progn
                                         (store-array array "/tmp/numpy-file-format.npy")
                                         (load-array "/tmp/numpy-file-format.npy"))))
                    (assert (array= array loaded-array)
                            ()
                            "Case: ~S~%ARRAYS~%  ~A~%and~%  ~A~%are not equal"
                            elt-type
                            array loaded-array)))
      (error (condition)
        (format t "~A~%" condition)
        (uiop:quit 1)))))
